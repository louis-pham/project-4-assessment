{"version":3,"sources":["util/util.js","components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["getConditionalString","selectedId","circleId","str1","str2","CircleSelector","props","className","selected","onClick","handleClick","Circles","App","state","id","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAGeA,G,YAHc,SAACC,EAAYC,EAAUC,GAAvB,IAA6BC,EAA7B,uDAAoC,GAApC,OAC3BH,IAAeC,EAAWC,EAAOC,IC+CpBC,MA3Cf,SAAwBC,GACtB,OACE,yBAAKC,UAAU,kBACb,4BACEA,UAAWP,EAAqBM,EAAME,SAAU,EAAG,YACnDC,QAAS,kBAAMH,EAAMI,YAAY,KAEhCV,EACCM,EAAME,SAAU,EAChB,oBAAqB,oBAGzB,4BACED,UAAWP,EAAqBM,EAAME,SAAU,EAAG,YACnDC,QAAS,kBAAMH,EAAMI,YAAY,KAEhCV,EACCM,EAAME,SAAU,EAChB,oBAAqB,oBAGzB,4BACED,UAAWP,EAAqBM,EAAME,SAAU,EAAG,YACnDC,QAAS,kBAAMH,EAAMI,YAAY,KAEhCV,EACCM,EAAME,SAAU,EAChB,oBAAqB,oBAGzB,4BACED,UAAWP,EAAqBM,EAAME,SAAU,EAAG,YACnDC,QAAS,kBAAMH,EAAMI,YAAY,KAEhCV,EACCM,EAAME,SAAU,EAChB,oBAAqB,sB,MCjBhBG,MAnBf,SAAiBL,GACf,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAWP,EAAqBM,EAAME,SAAU,EAAG,aAAxD,KAGA,yBAAKD,UAAWP,EAAqBM,EAAME,SAAU,EAAG,aAAxD,KAGA,yBAAKD,UAAWP,EAAqBM,EAAME,SAAU,EAAG,aAAxD,KAGA,yBAAKD,UAAWP,EAAqBM,EAAME,SAAU,EAAG,aAAxD,OCgBSI,E,2MA1BbC,MAAQ,CACNL,SAAU,G,EAGZE,YAAc,SAAAI,GACZ,EAAKC,SAAS,CAAEP,SAAUM,K,wEAI1B,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACEC,SAAUQ,KAAKH,MAAML,SACrBE,YAAaM,KAAKN,cAEpB,kBAAC,EAAD,CACEF,SAAUQ,KAAKH,MAAML,iB,GAnBfS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a38348a3.chunk.js","sourcesContent":["const getConditionalString = (selectedId, circleId, str1, str2 = \"\") =>\n  selectedId === circleId ? str1 : str2;\n\nexport default getConditionalString;\n","import React from 'react';\n\nimport \"./CircleSelector.css\";\nimport getConditionalString from \"../../util/util\";\n\nfunction CircleSelector(props) {\n  return (\n    <div className=\"CircleSelector\">\n      <button\n        className={getConditionalString(props.selected, 0, \"selected\")}\n        onClick={() => props.handleClick(0)}\n      >\n        {getConditionalString(\n          props.selected, 0,\n          \"Circle 1 Selected\", \"Select Circle 1\"\n        )}\n      </button>\n      <button\n        className={getConditionalString(props.selected, 1, \"selected\")}\n        onClick={() => props.handleClick(1)}\n      >\n        {getConditionalString(\n          props.selected, 1,\n          \"Circle 2 Selected\", \"Select Circle 2\"\n        )}\n      </button>\n      <button\n        className={getConditionalString(props.selected, 2, \"selected\")}\n        onClick={() => props.handleClick(2)}\n      >\n        {getConditionalString(\n          props.selected, 2,\n          \"Circle 3 Selected\", \"Select Circle 3\"\n        )}\n      </button>\n      <button\n        className={getConditionalString(props.selected, 3, \"selected\")}\n        onClick={() => props.handleClick(3)}\n      >\n        {getConditionalString(\n          props.selected, 3,\n          \"Circle 4 Selected\", \"Select Circle 4\"\n        )}\n      </button>\n    </div>\n  );\n}\n\nexport default CircleSelector;\n","import React from 'react';\n\nimport \"./Circles.css\";\nimport getConditionalString from \"../../util/util\";\n\nfunction Circles(props) {\n  return (\n    <div className=\"Circles\">\n      <div className={getConditionalString(props.selected, 0, \"selected\")}>\n        1\n      </div>\n      <div className={getConditionalString(props.selected, 1, \"selected\")}>\n        2\n      </div>\n      <div className={getConditionalString(props.selected, 2, \"selected\")}>\n        3\n      </div>\n      <div className={getConditionalString(props.selected, 3, \"selected\")}>\n        4\n      </div>\n    </div>\n  );\n}\n\nexport default Circles;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport CircleSelector from \"./components/CircleSelector/CircleSelector\";\nimport Circles from \"./components/Circles/Circles\";\n\nclass App extends Component {\n  state = {\n    selected: 0\n  };\n\n  handleClick = id => {\n    this.setState({ selected: id });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            selected={this.state.selected}\n            handleClick={this.handleClick}\n          />\n          <Circles\n            selected={this.state.selected}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}